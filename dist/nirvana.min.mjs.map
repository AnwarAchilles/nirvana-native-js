{"version":3,"file":"nirvana.min.mjs","sources":["../src/nirvana.core.js","../src/nirvana.mjs"],"sourcesContent":["/**\r\n * The core class for Nirvana.\r\n *\r\n * @class NirvanaCore\r\n */\r\nexport default class NirvanaCore {\r\n  /**\r\n   * The version of Nirvana.\r\n   *\r\n   * @static\r\n   * @type {number}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _version = 3.9;\r\n\r\n  /**\r\n   * The configuration settings for the todo list environment.\r\n   *\r\n   * @static\r\n   * @type {Map<string, string>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _configure = new Map([\r\n    [\"constant\", \"Nirvana\"],\r\n    [\"separator\", \".\"],\r\n    [\"issueTracking\", false]\r\n  ]);\r\n\r\n  /**\r\n   * The manifest for the todo list data.\r\n   *\r\n   * @static\r\n   * @type {Map<string, string>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _manifest = new Map();\r\n\r\n  /**\r\n   * The components for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _component = new Map();\r\n\r\n  /**\r\n   * The providers for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _provider = new Map();\r\n\r\n  /**\r\n   * The services for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _service = new Map(Object.entries({\r\n    select: ( selector )=> {\r\n      return document.querySelectorAll(selector);\r\n    },\r\n    protect: ( outputFunction ) => {\r\n      try {\r\n        outputFunction();\r\n      }catch(e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    listen: (condition) => {\r\n      let timeoutId;\r\n      const checkCondition = () => {\r\n        if (!condition()) {\r\n          // If condition is not met, wait and check again\r\n          timeoutId = setTimeout(checkCondition, 10);\r\n        } else {\r\n          // If condition is met, resolve promise\r\n          clearTimeout(timeoutId);\r\n        }\r\n      };\r\n      // Start listening\r\n      checkCondition();\r\n      // Return a promise\r\n      return new Promise((resolve) => {\r\n        resolve();\r\n      });\r\n    },\r\n    inuqueID: (prefix = \"\") => {\r\n      return `${prefix}${Date.now()}${Math.floor(Math.random() * 100000)}`;\r\n    },\r\n    lowercase: (stringText)=> {\r\n      return stringText.toLowerCase();\r\n    },\r\n    uppercase: (stringText)=>  {\r\n      return stringText.toUpperCase();\r\n    },\r\n    capitalize: (stringText)=> {\r\n      return stringText.charAt(0).toUpperCase() + stringText.slice(1);\r\n    }\r\n  }));\r\n\r\n  /**\r\n   * The stores for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n\r\n  static _store = new Map();\r\n\r\n\r\n  /**\r\n   * Array to store issues.\r\n   *\r\n   * @static\r\n   * @type {Array}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _issue = new Map();\r\n\r\n}","import Core from \"./nirvana.core\";\r\n\r\n/**\r\n * The `Nirvana` class represents the Nirvana JavaScript environment.\r\n * It provides various methods and features for configuring and managing the environment.\r\n * \r\n * @class Nirvana\r\n */\r\nexport default class Nirvana {\r\n  /**\r\n   * Configures the environment.\r\n   *\r\n   * @param {Object} environment - An object containing key-value pairs to reconfigure the environment\r\n   */\r\n  static environment(environment) {\r\n    window[\"NirvanaListen\"] = new Map();\r\n    \r\n    // Configure if present in the environment object\r\n    if (environment.configure) {\r\n      Core._configure = new Map([...Core._configure, ...Object.entries(environment.configure)]);\r\n    }\r\n\r\n    // Configure provider if present in the environment object\r\n    if (environment.provider) {\r\n      Core._provider = new Map([...Core._provider, ...Object.entries(environment.provider)]);\r\n    }\r\n\r\n    // Configure service if present in the environment object\r\n    if (environment.service) {\r\n      Core._service = new Map([...Core._service, ...Object.entries(environment.service)]);\r\n    }\r\n\r\n    // Set each provider as a property of the Core class\r\n    Core._provider.forEach((provider, name) => {\r\n      this[name] = provider;\r\n    });\r\n\r\n    // Load Service\r\n    Core._service.forEach((Service, name) => {\r\n      if (typeof window[name] === \"function\") {\r\n        console.log(\"Nirvana-Service: \" + name + \"() Already Exists\");\r\n      } else {\r\n        window[name] = Service;\r\n      }\r\n    });\r\n\r\n    // Set the Core object as a property of the global window object\r\n    window[Core._configure.get(\"constant\")] = this;\r\n\r\n    // Set up monitoring if enabled\r\n    if (environment.showMonitor) {\r\n      this.showMonitor = environment.showMonitor;\r\n      this.setupMonitoring();\r\n    }\r\n\r\n    // Start listening for issues\r\n    this.monitoring();\r\n  }\r\n\r\n  /**\r\n   * Set up the monitoring display.\r\n   */\r\n  static setupMonitoring() {\r\n    // Create a div element for the monitoring display\r\n    let elementMonitor = document.createElement(\"div\");\r\n    elementMonitor.style.position = \"fixed\";\r\n    elementMonitor.style.bottom = 0;\r\n    elementMonitor.style.padding = \"2px 5px\";\r\n    elementMonitor.style.maxHeight = \"20%\";\r\n    elementMonitor.style.width = \"100%\";\r\n    elementMonitor.style.overflow = \"auto\";\r\n    elementMonitor.style.fontSize = \"12px\";\r\n    document.body.append(elementMonitor);\r\n\r\n    // Create an unordered list for displaying issues\r\n    let elementIssue = document.createElement(\"ul\");\r\n    elementIssue.setAttribute(\"nv-monitor\", \"issue\");\r\n    elementIssue.innerHTML = \"\";\r\n    elementIssue.style.display = \"flex\";\r\n    elementIssue.style.flexDirection = \"column-reverse\";\r\n    elementIssue.style.bottom = 0;\r\n    elementIssue.style.padding = 0;\r\n    elementIssue.style.listStyleType = \"none\";\r\n    elementIssue.style.margin = 0;\r\n    elementMonitor.append(elementIssue);\r\n  }\r\n\r\n  /**\r\n   * Generates a component and sets it in the Core.Nest registry.\r\n   *\r\n   * @param {string|object} nameOrComponent - The name of the component or an object representing the component.\r\n   * @param {object} component - An optional object representing the nested component.\r\n   * @return {undefined}\r\n   */\r\n  static component(nameOrComponent, component) {\r\n    let nameComponent = \"\";\r\n    let classComponent = {};\r\n\r\n    // Check if a nested component is provided\r\n    if (component) {\r\n      nameComponent = `${nameOrComponent}${Core._configure.get(\"separator\")}${component.name}`;\r\n      classComponent = component;\r\n    } else {\r\n      // If no nested component is provided, use the name of the component object\r\n      nameComponent = nameOrComponent.name;\r\n      classComponent = nameOrComponent;\r\n    }\r\n\r\n    // Check if the component is of type Nirvana and update the component and selector properties\r\n    if (classComponent.__proto__.name === 'Nirvana') {\r\n      classComponent.component = nameComponent;\r\n      classComponent.selector = nameComponent.split(\".\").map(partName => this.selector('component', partName)).join(\" \");\r\n    }\r\n\r\n    // Set the component in the Core.Nest registry\r\n    Core._component.set(nameComponent, classComponent);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set a provider for a given name.\r\n   *\r\n   * @param {string} name - The name of the provider.\r\n   * @param {any} provider - The provider to set.\r\n   * @returns {Class} - The current class instance.\r\n   */\r\n  static provider(name, provider) {\r\n    // Set the provider in the Core provider map\r\n    Core._provider.set(name, provider);\r\n\r\n    // Set the provider as a property of the current class instance\r\n    this[name] = provider;\r\n\r\n    // Return the current class instance\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets a service in the Core service map.\r\n   * (Deprecated)\r\n   */\r\n  static service(service) {\r\n    if (typeof window[service.name] === \"function\") {\r\n      console.log(\"Nirvana-Service: \" + service + \"() Already Exists\");\r\n    } else {\r\n      window[service.name] = service;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stores data in the Core._store map.\r\n   *\r\n   * @param {string} name - The name of the data to be stored.\r\n   * @param {object} data - The data to be stored.\r\n   * @return {Map} The stored data.\r\n   */\r\n  static store(name, data) {\r\n    if (Core._store.has(name)) { // check if the data already exists\r\n      if (data) { // check if new data is provided\r\n        const lastData = Core._store.get(name); // retrieve the existing data\r\n        const newData = new Map(Object.entries(data)); // create a new map from the provided data\r\n        Core._store.set(name, new Map([...lastData, ...newData])); // merge the existing data with the new data and update the map\r\n        return Core._store.get(name); // return the updated data\r\n      } else {\r\n        return Core._store.get(name); // if no new data is provided, return the existing data\r\n      }\r\n    } else {\r\n      if (data) { // check if new data is provided\r\n        Core._store.set(name, new Map(Object.entries(data))); // create a new map from the provided data and store it\r\n        return Core._store.get(name); // return the stored data\r\n      } else {\r\n        Core._store.set(name, new Map()); // if no new data is provided, store an empty map\r\n        return Core._store.get(name); // return the stored data\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a component by name if it exists in the Core's component registry.\r\n   * \r\n   * @param {string} name - The name of the component to load.\r\n   * @returns {object|undefined} - The loaded component or undefined if not found.\r\n   */\r\n  static load(name) {\r\n    if (Core._component.has(name)) {\r\n      const component = Core._component.get(name);\r\n\r\n      /**\r\n       * Create a new instance of the loaded component.\r\n       * \r\n       * @param {object} parameter - An object containing parameters for the component.\r\n       * @returns {object} - The resulting component instance.\r\n       */\r\n      component.instance = (parameter) => {\r\n        return new component({ ...parameter });\r\n      };\r\n\r\n      return component;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run a component based on certain conditions.\r\n   * \r\n   * @param {string} name - The name of the component.\r\n   * @param {object} parameter - An object containing parameters.\r\n   * @returns {object} - The resulting component instance.\r\n   */\r\n  static run(name, parameter) {\r\n    const component = Core._component.get(name);\r\n    const instanceComponent = new component({ ...parameter });\r\n\r\n    // Check if the component has a 'state' property in its constructor\r\n    if (instanceComponent.constructor.state) {\r\n      return instanceComponent;\r\n    }\r\n\r\n    // Check if the component has a 'component' property\r\n    if (component.component) {\r\n      // Create a CloningComponent with undefined methods\r\n      const CloningComponent = class {};\r\n      const listMethod = Object.getOwnPropertyNames(component.prototype).filter(methodName => typeof instanceComponent[methodName] === 'function');\r\n      listMethod.forEach(methodName => {\r\n        CloningComponent.prototype[methodName] = () => undefined;\r\n      });\r\n      return new CloningComponent();\r\n    }\r\n\r\n    // Return the original component instance\r\n    return instanceComponent;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of elements that match the given prefix and name.\r\n   *\r\n   * @param {string} prefix - The prefix to match elements.\r\n   * @param {string} [name=''] - The name to match elements (optional, default is an empty string).\r\n   * @param {document} parent - The parent elements for start selector.\r\n   * @returns {Array} - An array of elements that match the given prefix and name.\r\n   */\r\n  static element(prefix, name = '', parent = document.querySelector(\"body\")) {\r\n    // Use the selector method to generate a selector string\r\n    const selector = this.selector(prefix, name);\r\n    \r\n    // Use document.querySelectorAll to find all elements that match the selector\r\n    return parent.querySelectorAll(selector);\r\n  }\r\n\r\n  /**\r\n   * Generates a selector based on a prefix and name.\r\n   *\r\n   * @param {string} prefix - The prefix to add to the selector.\r\n   * @param {string} [name=''] - The name to add to the selector. Default is an empty string.\r\n   * @returns {string} The generated selector.\r\n   */\r\n  static selector(prefix, name = '') {\r\n    // Get the lowercase constant value from the configuration\r\n    const constant = Core._configure.get(\"constant\").toLowerCase();\r\n\r\n    // Add the prefix to the selector if it is provided\r\n    const prefixer = prefix ? `-${prefix}` : '';\r\n\r\n    // Generate the selector based on the prefix and name\r\n    const selector = name ? `[${constant}${prefixer}='${name}']` : `[${constant}${prefixer}]`;\r\n\r\n    return selector;\r\n  }\r\n\r\n  /**\r\n   * Adds an issue to the Core issue list or returns the entire issue list.\r\n   *\r\n   * @param {string} name - The name of the issue.\r\n   * @param {string} message - The message of the issue.\r\n   * @return {Array} - The entire issue list if no name is provided.\r\n   */\r\n  static issue(name = '', message = '') {\r\n    if (name) {\r\n      Core._issue.set(name, message);\r\n    } else {\r\n      return Core._issue;\r\n    }\r\n    this.monitoring();\r\n  }\r\n\r\n  /**\r\n   * Monitors issues and displays them.\r\n   */\r\n  static monitoring() {\r\n    console.clear();\r\n    if (this.showMonitor) {\r\n      this.element(\"monitor\", \"issue\").item(0).innerHTML = `<li>🚀 Nirvana ${Core._version} running ..</li>`;\r\n      Core._issue.forEach((message, name) => {\r\n        let boxIssue = document.createElement(\"li\");\r\n        name = name.split(\":\");\r\n        boxIssue.innerHTML = `${name[0]} ⌬ ${name[1]} 𝄖 ${message}`;\r\n        boxIssue.style.borderTop = \"1px solid rgba(0,0,0,0.1)\";\r\n        this.element(\"monitor\", \"issue\").item(0).append(boxIssue);\r\n      });\r\n      if (this.element(\"monitor\", \"issue\").item(0).querySelector(\"li:nth-child(\" + (Core._issue.size + 1) + \")\")) {\r\n        this.element(\"monitor\", \"issue\").item(0).querySelector(\"li:nth-child(\" + (Core._issue.size + 1) + \")\").style.backgroundColor = \"rgba(100,100,100,0.1)\";\r\n      }\r\n    } else {\r\n      console.debug(`🚀 Nirvana ${Core._version} running ..`);\r\n      Core._issue.forEach((message, name) => {\r\n        name = name.split(\":\");\r\n        console.debug(`${name[0]} ⌬ ${name[1]} 𝄖 ${message}`);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The selected element in the DOM.\r\n   *\r\n   * @type {Element}\r\n   */\r\n  element = document.querySelector(\"body\");\r\n\r\n  /**\r\n   * Constructs a new instance of the class.\r\n   */\r\n  constructor() {\r\n    if (this.element.querySelector(this.constructor.selector)) {\r\n      this.constructor.state = true;\r\n      this.element = this.element.querySelector(this.constructor.selector);\r\n    } else {\r\n      Nirvana.issue(\"Component:\" + this.constructor.name, `Element Not Found\r\n        add attribute \"${this.constructor.selector}\" to element\r\n      `);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects elements from the DOM based on the given selector.\r\n   *\r\n   * @param {string} selector - The CSS selector used to select elements.\r\n   * @return {NodeList} - A list of elements that match the selector.\r\n   */\r\n  select(selector) {\r\n    return this.element.querySelectorAll(selector);\r\n  }\r\n}\r\n"],"names":["NirvanaCore","static","Map","Object","entries","select","selector","document","querySelectorAll","protect","outputFunction","e","console","error","listen","condition","timeoutId","checkCondition","clearTimeout","setTimeout","Promise","resolve","inuqueID","prefix","Date","now","Math","floor","random","lowercase","stringText","toLowerCase","uppercase","toUpperCase","capitalize","charAt","slice","Nirvana","environment","window","configure","Core","_configure","provider","_provider","service","_service","forEach","name","this","Service","log","get","showMonitor","setupMonitoring","monitoring","elementMonitor","createElement","style","position","bottom","padding","maxHeight","width","overflow","fontSize","body","append","elementIssue","setAttribute","innerHTML","display","flexDirection","listStyleType","margin","component","nameOrComponent","nameComponent","classComponent","__proto__","split","map","partName","join","_component","set","store","data","_store","has","lastData","newData","load","instance","parameter","run","instanceComponent","constructor","state","CloningComponent","getOwnPropertyNames","prototype","filter","methodName","element","parent","querySelector","constant","prefixer","issue","message","_issue","clear","item","_version","boxIssue","borderTop","size","backgroundColor","debug"],"mappings":"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"}