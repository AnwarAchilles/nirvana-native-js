{"version":3,"file":"nirvana.min.js","sources":["../src/nirvana.core.js"],"sourcesContent":["/**\r\n * The core class for Nirvana.\r\n *\r\n * @class NirvanaCore\r\n */\r\nexport default class NirvanaCore {\r\n  /**\r\n   * The version of Nirvana.\r\n   *\r\n   * @static\r\n   * @type {number}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _version = 4.0;\r\n\r\n  static _data = {};\r\n\r\n  /**\r\n   * The configuration settings for the todo list environment.\r\n   *\r\n   * @static\r\n   * @type {Map<string, string>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _configure = new Map([\r\n    [\"alias\", \"Nirvana\"],\r\n    [\"separator\", \".\"],\r\n    [\"issueTracking\", false]\r\n  ]);\r\n\r\n  /**\r\n   * The manifest for the todo list data.\r\n   *\r\n   * @static\r\n   * @type {Map<string, string>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _manifest = new Map();\r\n\r\n  /**\r\n   * The components for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _component = new Map();\r\n\r\n  /**\r\n   * The providers for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _provider = new Map();\r\n\r\n  /**\r\n   * The services for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _service = new Map(Object.entries({\r\n    select: ( selector )=> {\r\n      return document.querySelectorAll(selector);\r\n    },\r\n    protect: ( outputFunction ) => {\r\n      try {\r\n        outputFunction();\r\n      }catch(e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    listen: (condition) => {\r\n      let timeoutId;\r\n      const checkCondition = () => {\r\n        if (!condition()) {\r\n          // If condition is not met, wait and check again\r\n          timeoutId = setTimeout(checkCondition, 10);\r\n        } else {\r\n          // If condition is met, resolve promise\r\n          clearTimeout(timeoutId);\r\n        }\r\n      };\r\n      // Start listening\r\n      checkCondition();\r\n      // Return a promise\r\n      return new Promise((resolve) => {\r\n        resolve();\r\n      });\r\n    },\r\n    inuqueID: (prefix = \"\") => {\r\n      return `${prefix}${Date.now()}${Math.floor(Math.random() * 100000)}`;\r\n    },\r\n    lowercase: (stringText)=> {\r\n      return stringText.toLowerCase();\r\n    },\r\n    uppercase: (stringText)=>  {\r\n      return stringText.toUpperCase();\r\n    },\r\n    capitalize: (stringText)=> {\r\n      return stringText.charAt(0).toUpperCase() + stringText.slice(1);\r\n    }\r\n  }));\r\n\r\n  /**\r\n   * The stores for the todo list.\r\n   *\r\n   * @static\r\n   * @type {Map<any, any>}\r\n   * @memberof NirvanaCore\r\n   */\r\n\r\n  static _store = new Map();\r\n\r\n\r\n  /**\r\n   * Array to store issues.\r\n   *\r\n   * @static\r\n   * @type {Array}\r\n   * @memberof NirvanaCore\r\n   */\r\n  static _issue = new Map();\r\n\r\n}"],"names":["Map","Object","entries","select","selector","document","querySelectorAll","protect","outputFunction","e","console","error","listen","condition","timeoutId","checkCondition","clearTimeout","setTimeout","Promise","resolve","inuqueID","prefix","Date","now","Math","floor","random","lowercase","stringText","toLowerCase","uppercase","toUpperCase","capitalize","charAt","slice"],"mappings":"aAwBsB,IAAIA,IAAI,CAC1B,CAAC,QAAS,WACV,CAAC,YAAa,KACd,CAAC,iBAAiB,KAUD,IAAIA,IASH,IAAIA,IASL,IAAIA,IASL,IAAIA,IAAIC,OAAOC,QAAQ,CACvCC,OAAUC,GACDC,SAASC,iBAAiBF,GAEnCG,QAAWC,IACT,IACEA,GACD,CAAA,MAAMC,GACLC,QAAQC,MAAMF,EACf,GAEHG,OAASC,IACP,IAAIC,EACJ,MAAMC,EAAiB,KAChBF,IAKHG,aAAaF,GAHbA,EAAYG,WAAWF,EAAgB,GAIxC,EAKH,OAFAA,IAEO,IAAIG,SAASC,IAClBA,GAAS,GACT,EAEJC,SAAU,CAACC,EAAS,KACX,GAAGA,IAASC,KAAKC,QAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,YAElDC,UAAYC,GACHA,EAAWC,cAEpBC,UAAYF,GACHA,EAAWG,cAEpBC,WAAaJ,GACJA,EAAWK,OAAO,GAAGF,cAAgBH,EAAWM,MAAM,MAYjD,IAAIlC,IAUJ,IAAIA"}