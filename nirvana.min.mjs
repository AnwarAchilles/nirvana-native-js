class e{static _version=3.9;static _configure=new Map([["constant","Nirvana"],["separator","."],["issueTracking",!1]]);static _manifest=new Map;static _component=new Map;static _provider=new Map;static _service=new Map(Object.entries({select:e=>document.querySelectorAll(e),protect:e=>{try{e()}catch(e){console.error(e)}},listen:e=>{let t;const o=()=>{e()?clearTimeout(t):t=setTimeout(o,10)};return o(),new Promise((e=>{e()}))},inuqueID:(e="")=>`${e}${Date.now()}${Math.floor(1e5*Math.random())}`,lowercase:e=>e.toLowerCase(),uppercase:e=>e.toUpperCase(),capitalize:e=>e.charAt(0).toUpperCase()+e.slice(1)}));static _store=new Map;static _issue=new Map}class t{static environment(t){window.NirvanaListen=new Map,t.configure&&(e._configure=new Map([...e._configure,...Object.entries(t.configure)])),t.provider&&(e._provider=new Map([...e._provider,...Object.entries(t.provider)])),t.service&&(e._service=new Map([...e._service,...Object.entries(t.service)])),e._provider.forEach(((e,t)=>{this[t]=e})),e._service.forEach(((e,t)=>{"function"==typeof window[t]?console.log("Nirvana-Service: "+t+"() Already Exists"):window[t]=e})),window[e._configure.get("constant")]=this,t.showMonitor&&(this.showMonitor=t.showMonitor,this.setupMonitoring()),this.monitoring()}static setupMonitoring(){let e=document.createElement("div");e.style.position="fixed",e.style.bottom=0,e.style.padding="2px 5px",e.style.maxHeight="20%",e.style.width="100%",e.style.overflow="auto",e.style.fontSize="12px",document.body.append(e);let t=document.createElement("ul");t.setAttribute("nv-monitor","issue"),t.innerHTML="",t.style.display="flex",t.style.flexDirection="column-reverse",t.style.bottom=0,t.style.padding=0,t.style.listStyleType="none",t.style.margin=0,e.append(t)}static component(t,o){let n="",s={};return o?(n=`${t}${e._configure.get("separator")}${o.name}`,s=o):(n=t.name,s=t),"Nirvana"===s.__proto__.name&&(s.component=n,s.selector=n.split(".").map((e=>this.selector("component",e))).join(" ")),e._component.set(n,s),this}static provider(t,o){return e._provider.set(t,o),this[t]=o,this}static service(e){"function"==typeof window[e.name]?console.log("Nirvana-Service: "+e+"() Already Exists"):window[e.name]=e}static store(t,o){if(e._store.has(t)){if(o){const n=e._store.get(t),s=new Map(Object.entries(o));return e._store.set(t,new Map([...n,...s])),e._store.get(t)}return e._store.get(t)}return o?(e._store.set(t,new Map(Object.entries(o))),e._store.get(t)):(e._store.set(t,new Map),e._store.get(t))}static load(t){if(e._component.has(t)){const o=e._component.get(t);return o.instance=e=>new o({...e}),o}}static run(t,o){const n=e._component.get(t),s=new n({...o});if(s.constructor.state)return s;if(n.component){const e=class{};return Object.getOwnPropertyNames(n.prototype).filter((e=>"function"==typeof s[e])).forEach((t=>{e.prototype[t]=()=>{}})),new e}return s}static element(e,t="",o=document.querySelector("body")){const n=this.selector(e,t);return o.querySelectorAll(n)}static selector(t,o=""){const n=e._configure.get("constant").toLowerCase(),s=t?`-${t}`:"";return o?`[${n}${s}='${o}']`:`[${n}${s}]`}static issue(t="",o=""){if(!t)return e._issue;e._issue.set(t,o),this.monitoring()}static monitoring(){console.clear(),this.showMonitor?(this.element("monitor","issue").item(0).innerHTML=`<li>üöÄ Nirvana ${e._version} running ..</li>`,e._issue.forEach(((e,t)=>{let o=document.createElement("li");t=t.split(":"),o.innerHTML=`${t[0]} ‚å¨ ${t[1]} ùÑñ ${e}`,o.style.borderTop="1px solid rgba(0,0,0,0.1)",this.element("monitor","issue").item(0).append(o)})),this.element("monitor","issue").item(0).querySelector("li:nth-child("+(e._issue.size+1)+")")&&(this.element("monitor","issue").item(0).querySelector("li:nth-child("+(e._issue.size+1)+")").style.backgroundColor="rgba(100,100,100,0.1)")):(console.debug(`üöÄ Nirvana ${e._version} running ..`),e._issue.forEach(((e,t)=>{t=t.split(":"),console.debug(`${t[0]} ‚å¨ ${t[1]} ùÑñ ${e}`)})))}element=document.querySelector("body");constructor(){this.element.querySelector(this.constructor.selector)?(this.constructor.state=!0,this.element=this.element.querySelector(this.constructor.selector)):t.issue("Component:"+this.constructor.name,`Element Not Found\n        add attribute "${this.constructor.selector}" to element\n      `)}select(e){return this.element.querySelectorAll(e)}}export{t as default};
//# sourceMappingURL=nirvana.min.mjs.map
